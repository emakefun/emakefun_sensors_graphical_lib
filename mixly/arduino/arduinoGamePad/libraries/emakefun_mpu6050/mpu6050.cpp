#include "mpu6050.h"

#include <Arduino.h>
#include <Wire.h>

#define MPU6050_RA_GYRO_CONFIG (0x1B)
#define MPU6050_RA_ACCEL_CONFIG (0x1C)
#define MPU6050_RA_USER_CTRL (0x6A)
#define MPU6050_RA_PWR_MGMT_1 (0x6B)
#define MPU6050_RA_BANK_SEL (0x6D)
#define MPU6050_RA_MEM_START_ADDR (0x6E)
#define MPU6050_RA_MEM_R_W (0x6F)
#define MPU6050_RA_FIFO_COUNT_H (0x72)
#define MPU6050_RA_FIFO_R_W (0x74)
#define MPU6050_RA_WHO_AM_I (0x75)

#define MPU6050_CLOCK_PLL_XGYRO (0x01)

#define MPU6050_GYRO_FS_250 (0x00)
#define MPU6050_GYRO_FS_500 (0x01)
#define MPU6050_GYRO_FS_1000 (0x02)
#define MPU6050_GYRO_FS_2000 (0x03)

#define MPU6050_ACCEL_FS_2 (0x00)
#define MPU6050_ACCEL_FS_4 (0x01)
#define MPU6050_ACCEL_FS_8 (0x02)
#define MPU6050_ACCEL_FS_16 (0x03)

#define MPU6050_DMP_MEMORY_CHUNK_SIZE (16)

#define MPU6050_DMP_CODE_SIZE (3062)

#define MPU6050_FIFO_DEFAULT_TIMEOUT (11000)

#define FIFO_SIZE (28)

namespace {

const unsigned char g_dmp_memory[MPU6050_DMP_CODE_SIZE] PROGMEM = {
    /* bank # 0 */
    0x00,
    0xF8,
    0xF6,
    0x2A,
    0x3F,
    0x68,
    0xF5,
    0x7A,
    0x00,
    0x06,
    0xFF,
    0xFE,
    0x00,
    0x03,
    0x00,
    0x00,
    0x00,
    0x65,
    0x00,
    0x54,
    0xFF,
    0xEF,
    0x00,
    0x00,
    0xFA,
    0x80,
    0x00,
    0x0B,
    0x12,
    0x82,
    0x00,
    0x01,
    0x03,
    0x0C,
    0x30,
    0xC3,
    0x0A,
    0x74,
    0x56,
    0x2D,
    0x0D,
    0x62,
    0xDB,
    0xC7,
    0x16,
    0xF4,
    0xBA,
    0x02,
    0x38,
    0x83,
    0xF8,
    0x83,
    0x30,
    0x00,
    0xF8,
    0x83,
    0x25,
    0x8E,
    0xF8,
    0x83,
    0x30,
    0x00,
    0xF8,
    0x83,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x0C,
    0xBD,
    0xD8,
    0x11,
    0x24,
    0x00,
    0x04,
    0x00,
    0x1A,
    0x82,
    0x79,
    0xA1,
    0x00,
    0x36,
    0x00,
    0x3C,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x10,
    0x00,
    0x00,
    0x38,
    0x83,
    0x6F,
    0xA2,
    0x00,
    0x3E,
    0x03,
    0x30,
    0x40,
    0x00,
    0x00,
    0x00,
    0x02,
    0xCA,
    0xE3,
    0x09,
    0x3E,
    0x80,
    0x00,
    0x00,
    0x20,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x40,
    0x00,
    0x00,
    0x00,
    0x60,
    0x00,
    0x00,
    0x00,
    0x1F,
    0xA4,
    0xE8,
    0xE4,
    0xFF,
    0xF5,
    0xDC,
    0xB9,
    0x00,
    0x5B,
    0x79,
    0xCF,
    0x1F,
    0x3F,
    0x78,
    0x76,
    0x00,
    0x86,
    0x7C,
    0x5A,
    0x00,
    0x86,
    0x23,
    0x47,
    0xFA,
    0xB9,
    0x86,
    0x31,
    0x00,
    0x74,
    0x87,
    0x8A,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x43,
    0x05,
    0xFF,
    0xFF,
    0xE9,
    0xA8,
    0x00,
    0x00,
    0x21,
    0x82,
    0xFA,
    0xB8,
    0x4D,
    0x46,
    0xFF,
    0xFA,
    0xDF,
    0x3D,
    0xFF,
    0xFF,
    0xB2,
    0xB3,
    0x00,
    0x00,
    0x00,
    0x00,
    0x3F,
    0xFF,
    0xBA,
    0x98,
    0x00,
    0x5D,
    0xAC,
    0x08,
    0x00,
    0x0A,
    0x63,
    0x78,
    0x00,
    0x01,
    0x46,
    0x21,
    0xFF,
    0xFF,
    0x00,
    0x00,
    0x00,
    0x00,
    0x42,
    0xB5,
    0x00,
    0x06,
    0x00,
    0x64,
    0x00,
    0x64,
    0x00,
    0x06,
    0x14,
    0x06,
    0x02,
    0x9F,
    0x0F,
    0x47,
    0x91,
    0x32,
    0xD9,
    0x0E,
    0x9F,
    0xC9,
    0x1D,
    0xCF,
    0x4C,
    0x34,
    0x3B,
    0xB6,
    0x7A,
    0xE8,
    0x00,
    0x64,
    0x00,
    0x06,
    0x00,
    0xC8,
    0x00,
    0x00,
    0x00,
    0x00,
    0xFF,
    0xFE,
    /* bank # 1 */
    0x10,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x07,
    0x00,
    0x00,
    0xFF,
    0xF1,
    0x00,
    0x00,
    0xFA,
    0x46,
    0x00,
    0x00,
    0xA2,
    0xB8,
    0x00,
    0x00,
    0x10,
    0x00,
    0x00,
    0x00,
    0x04,
    0xD6,
    0x00,
    0x00,
    0x04,
    0xCC,
    0x00,
    0x00,
    0x04,
    0xCC,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x06,
    0x00,
    0x02,
    0x00,
    0x05,
    0x00,
    0x07,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x64,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0C,
    0x00,
    0x05,
    0x00,
    0x64,
    0x00,
    0x20,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x40,
    0x00,
    0x00,
    0x00,
    0x03,
    0x00,
    0x00,
    0x00,
    0x00,
    0x32,
    0xF8,
    0x98,
    0x00,
    0x00,
    0xFF,
    0x65,
    0x00,
    0x00,
    0x83,
    0x0F,
    0x00,
    0x00,
    0x00,
    0x06,
    0x00,
    0x00,
    0xFF,
    0xF1,
    0x00,
    0x00,
    0xFA,
    0x46,
    0x00,
    0x00,
    0xA2,
    0xB8,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x32,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x10,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x0D,
    0x00,
    0x00,
    0xB2,
    0x6A,
    0x00,
    0x02,
    0x00,
    0x00,
    0x00,
    0x01,
    0xFB,
    0x83,
    0x00,
    0x7C,
    0x00,
    0x00,
    0xFB,
    0x15,
    0xFC,
    0x00,
    0x1F,
    0xB4,
    0xFF,
    0x83,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x65,
    0x00,
    0x07,
    0x00,
    0x64,
    0x03,
    0xE8,
    0x00,
    0x64,
    0x00,
    0x28,
    0x00,
    0x00,
    0xFF,
    0xFD,
    0x00,
    0x00,
    0x00,
    0x00,
    0x16,
    0xA0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x10,
    0x00,
    0x00,
    0x2F,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0xF4,
    0x00,
    0x00,
    0x10,
    0x00,
    /* bank # 2 */
    0x00,
    0x28,
    0x00,
    0x00,
    0xFF,
    0xFF,
    0x45,
    0x81,
    0xFF,
    0xFF,
    0xFA,
    0x72,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x44,
    0x00,
    0x01,
    0x00,
    0x05,
    0xBA,
    0xC6,
    0x00,
    0x47,
    0x78,
    0xA2,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x06,
    0x00,
    0x00,
    0x00,
    0x00,
    0x14,
    0x00,
    0x00,
    0x23,
    0xBB,
    0x00,
    0x2E,
    0xA2,
    0x5B,
    0x00,
    0x00,
    0x05,
    0x68,
    0x00,
    0x0B,
    0xCF,
    0x49,
    0x00,
    0x04,
    0xFF,
    0xFD,
    0x00,
    0x02,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x02,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1B,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x64,
    0x00,
    0x07,
    0x00,
    0x08,
    0x00,
    0x06,
    0x00,
    0x06,
    0xFF,
    0xFE,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x2E,
    0xA2,
    0x5B,
    0x00,
    0x00,
    0x05,
    0x68,
    0x00,
    0x0B,
    0xCF,
    0x49,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xF8,
    0xF6,
    0x2A,
    0x3F,
    0x68,
    0xF5,
    0x7A,
    0x00,
    0x04,
    0xFF,
    0xFD,
    0x00,
    0x02,
    0x00,
    0x00,
    0x00,
    0x1B,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0E,
    0x00,
    0x0E,
    0xFF,
    0xFF,
    0xFF,
    0xCF,
    0x00,
    0x04,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x32,
    0xFF,
    0xFF,
    0xFF,
    0x9C,
    0x00,
    0x00,
    0x43,
    0x05,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x64,
    0xFF,
    0xE5,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    /* bank # 3 */
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x80,
    0x00,
    0x00,
    0x01,
    0x80,
    0x00,
    0x00,
    0x01,
    0x80,
    0x00,
    0x00,
    0x24,
    0x26,
    0xD3,
    0x00,
    0x01,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x06,
    0x00,
    0x10,
    0x00,
    0x96,
    0x00,
    0x3C,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1F,
    0x9E,
    0x65,
    0x5D,
    0x0C,
    0x0A,
    0x4E,
    0x68,
    0xCD,
    0xCF,
    0x77,
    0x09,
    0x50,
    0x16,
    0x67,
    0x59,
    0xC6,
    0x19,
    0xCE,
    0x82,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x47,
    0x71,
    0x1C,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x17,
    0xD7,
    0x84,
    0x00,
    0x03,
    0x00,
    0x00,
    0x00,
    0x00,
    0x11,
    0xDC,
    0x47,
    0x03,
    0x00,
    0x00,
    0x00,
    0xC7,
    0x93,
    0x8F,
    0x9D,
    0x1E,
    0x1B,
    0x1C,
    0x19,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0E,
    0xDF,
    0xA4,
    0x38,
    0x1F,
    0x9E,
    0x65,
    0x5D,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x47,
    0x71,
    0x1C,
    0x02,
    0x03,
    0x18,
    0x85,
    0x00,
    0x00,
    0x40,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x03,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x3F,
    0xFF,
    0xFF,
    0xFD,
    0xFF,
    0xFF,
    0xF4,
    0xC9,
    0xFF,
    0xFF,
    0xBC,
    0xF0,
    0x00,
    0x01,
    0x0C,
    0x0F,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xF5,
    0xB7,
    0xBA,
    0xB3,
    0x67,
    0x7D,
    0xDF,
    0x7E,
    0x72,
    0x90,
    0x2E,
    0x55,
    0x4C,
    0xF6,
    0xE6,
    0x88,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    /* bank # 4 */
    0xD8,
    0xDC,
    0xB4,
    0xB8,
    0xB0,
    0xD8,
    0xB9,
    0xAB,
    0xF3,
    0xF8,
    0xFA,
    0xB3,
    0xB7,
    0xBB,
    0x8E,
    0x9E,
    0xAE,
    0xF1,
    0x32,
    0xF5,
    0x1B,
    0xF1,
    0xB4,
    0xB8,
    0xB0,
    0x80,
    0x97,
    0xF1,
    0xA9,
    0xDF,
    0xDF,
    0xDF,
    0xAA,
    0xDF,
    0xDF,
    0xDF,
    0xF2,
    0xAA,
    0x4C,
    0xCD,
    0x6C,
    0xA9,
    0x0C,
    0xC9,
    0x2C,
    0x97,
    0xF1,
    0xA9,
    0x89,
    0x26,
    0x46,
    0x66,
    0xB2,
    0x89,
    0x99,
    0xA9,
    0x2D,
    0x55,
    0x7D,
    0xB0,
    0xB0,
    0x8A,
    0xA8,
    0x96,
    0x36,
    0x56,
    0x76,
    0xF1,
    0xBA,
    0xA3,
    0xB4,
    0xB2,
    0x80,
    0xC0,
    0xB8,
    0xA8,
    0x97,
    0x11,
    0xB2,
    0x83,
    0x98,
    0xBA,
    0xA3,
    0xF0,
    0x24,
    0x08,
    0x44,
    0x10,
    0x64,
    0x18,
    0xB2,
    0xB9,
    0xB4,
    0x98,
    0x83,
    0xF1,
    0xA3,
    0x29,
    0x55,
    0x7D,
    0xBA,
    0xB5,
    0xB1,
    0xA3,
    0x83,
    0x93,
    0xF0,
    0x00,
    0x28,
    0x50,
    0xF5,
    0xB2,
    0xB6,
    0xAA,
    0x83,
    0x93,
    0x28,
    0x54,
    0x7C,
    0xF1,
    0xB9,
    0xA3,
    0x82,
    0x93,
    0x61,
    0xBA,
    0xA2,
    0xDA,
    0xDE,
    0xDF,
    0xDB,
    0x81,
    0x9A,
    0xB9,
    0xAE,
    0xF5,
    0x60,
    0x68,
    0x70,
    0xF1,
    0xDA,
    0xBA,
    0xA2,
    0xDF,
    0xD9,
    0xBA,
    0xA2,
    0xFA,
    0xB9,
    0xA3,
    0x82,
    0x92,
    0xDB,
    0x31,
    0xBA,
    0xA2,
    0xD9,
    0xBA,
    0xA2,
    0xF8,
    0xDF,
    0x85,
    0xA4,
    0xD0,
    0xC1,
    0xBB,
    0xAD,
    0x83,
    0xC2,
    0xC5,
    0xC7,
    0xB8,
    0xA2,
    0xDF,
    0xDF,
    0xDF,
    0xBA,
    0xA0,
    0xDF,
    0xDF,
    0xDF,
    0xD8,
    0xD8,
    0xF1,
    0xB8,
    0xAA,
    0xB3,
    0x8D,
    0xB4,
    0x98,
    0x0D,
    0x35,
    0x5D,
    0xB2,
    0xB6,
    0xBA,
    0xAF,
    0x8C,
    0x96,
    0x19,
    0x8F,
    0x9F,
    0xA7,
    0x0E,
    0x16,
    0x1E,
    0xB4,
    0x9A,
    0xB8,
    0xAA,
    0x87,
    0x2C,
    0x54,
    0x7C,
    0xBA,
    0xA4,
    0xB0,
    0x8A,
    0xB6,
    0x91,
    0x32,
    0x56,
    0x76,
    0xB2,
    0x84,
    0x94,
    0xA4,
    0xC8,
    0x08,
    0xCD,
    0xD8,
    0xB8,
    0xB4,
    0xB0,
    0xF1,
    0x99,
    0x82,
    0xA8,
    0x2D,
    0x55,
    0x7D,
    0x98,
    0xA8,
    0x0E,
    0x16,
    0x1E,
    0xA2,
    0x2C,
    0x54,
    0x7C,
    0x92,
    0xA4,
    0xF0,
    0x2C,
    0x50,
    0x78,
    /* bank # 5 */
    0xF1,
    0x84,
    0xA8,
    0x98,
    0xC4,
    0xCD,
    0xFC,
    0xD8,
    0x0D,
    0xDB,
    0xA8,
    0xFC,
    0x2D,
    0xF3,
    0xD9,
    0xBA,
    0xA6,
    0xF8,
    0xDA,
    0xBA,
    0xA6,
    0xDE,
    0xD8,
    0xBA,
    0xB2,
    0xB6,
    0x86,
    0x96,
    0xA6,
    0xD0,
    0xF3,
    0xC8,
    0x41,
    0xDA,
    0xA6,
    0xC8,
    0xF8,
    0xD8,
    0xB0,
    0xB4,
    0xB8,
    0x82,
    0xA8,
    0x92,
    0xF5,
    0x2C,
    0x54,
    0x88,
    0x98,
    0xF1,
    0x35,
    0xD9,
    0xF4,
    0x18,
    0xD8,
    0xF1,
    0xA2,
    0xD0,
    0xF8,
    0xF9,
    0xA8,
    0x84,
    0xD9,
    0xC7,
    0xDF,
    0xF8,
    0xF8,
    0x83,
    0xC5,
    0xDA,
    0xDF,
    0x69,
    0xDF,
    0x83,
    0xC1,
    0xD8,
    0xF4,
    0x01,
    0x14,
    0xF1,
    0xA8,
    0x82,
    0x4E,
    0xA8,
    0x84,
    0xF3,
    0x11,
    0xD1,
    0x82,
    0xF5,
    0xD9,
    0x92,
    0x28,
    0x97,
    0x88,
    0xF1,
    0x09,
    0xF4,
    0x1C,
    0x1C,
    0xD8,
    0x84,
    0xA8,
    0xF3,
    0xC0,
    0xF9,
    0xD1,
    0xD9,
    0x97,
    0x82,
    0xF1,
    0x29,
    0xF4,
    0x0D,
    0xD8,
    0xF3,
    0xF9,
    0xF9,
    0xD1,
    0xD9,
    0x82,
    0xF4,
    0xC2,
    0x03,
    0xD8,
    0xDE,
    0xDF,
    0x1A,
    0xD8,
    0xF1,
    0xA2,
    0xFA,
    0xF9,
    0xA8,
    0x84,
    0x98,
    0xD9,
    0xC7,
    0xDF,
    0xF8,
    0xF8,
    0xF8,
    0x83,
    0xC7,
    0xDA,
    0xDF,
    0x69,
    0xDF,
    0xF8,
    0x83,
    0xC3,
    0xD8,
    0xF4,
    0x01,
    0x14,
    0xF1,
    0x98,
    0xA8,
    0x82,
    0x2E,
    0xA8,
    0x84,
    0xF3,
    0x11,
    0xD1,
    0x82,
    0xF5,
    0xD9,
    0x92,
    0x50,
    0x97,
    0x88,
    0xF1,
    0x09,
    0xF4,
    0x1C,
    0xD8,
    0x84,
    0xA8,
    0xF3,
    0xC0,
    0xF8,
    0xF9,
    0xD1,
    0xD9,
    0x97,
    0x82,
    0xF1,
    0x49,
    0xF4,
    0x0D,
    0xD8,
    0xF3,
    0xF9,
    0xF9,
    0xD1,
    0xD9,
    0x82,
    0xF4,
    0xC4,
    0x03,
    0xD8,
    0xDE,
    0xDF,
    0xD8,
    0xF1,
    0xAD,
    0x88,
    0x98,
    0xCC,
    0xA8,
    0x09,
    0xF9,
    0xD9,
    0x82,
    0x92,
    0xA8,
    0xF5,
    0x7C,
    0xF1,
    0x88,
    0x3A,
    0xCF,
    0x94,
    0x4A,
    0x6E,
    0x98,
    0xDB,
    0x69,
    0x31,
    0xDA,
    0xAD,
    0xF2,
    0xDE,
    0xF9,
    0xD8,
    0x87,
    0x95,
    0xA8,
    0xF2,
    0x21,
    0xD1,
    0xDA,
    0xA5,
    0xF9,
    0xF4,
    0x17,
    0xD9,
    0xF1,
    0xAE,
    0x8E,
    0xD0,
    0xC0,
    0xC3,
    0xAE,
    0x82,
    /* bank # 6 */
    0xC6,
    0x84,
    0xC3,
    0xA8,
    0x85,
    0x95,
    0xC8,
    0xA5,
    0x88,
    0xF2,
    0xC0,
    0xF1,
    0xF4,
    0x01,
    0x0E,
    0xF1,
    0x8E,
    0x9E,
    0xA8,
    0xC6,
    0x3E,
    0x56,
    0xF5,
    0x54,
    0xF1,
    0x88,
    0x72,
    0xF4,
    0x01,
    0x15,
    0xF1,
    0x98,
    0x45,
    0x85,
    0x6E,
    0xF5,
    0x8E,
    0x9E,
    0x04,
    0x88,
    0xF1,
    0x42,
    0x98,
    0x5A,
    0x8E,
    0x9E,
    0x06,
    0x88,
    0x69,
    0xF4,
    0x01,
    0x1C,
    0xF1,
    0x98,
    0x1E,
    0x11,
    0x08,
    0xD0,
    0xF5,
    0x04,
    0xF1,
    0x1E,
    0x97,
    0x02,
    0x02,
    0x98,
    0x36,
    0x25,
    0xDB,
    0xF9,
    0xD9,
    0x85,
    0xA5,
    0xF3,
    0xC1,
    0xDA,
    0x85,
    0xA5,
    0xF3,
    0xDF,
    0xD8,
    0x85,
    0x95,
    0xA8,
    0xF3,
    0x09,
    0xDA,
    0xA5,
    0xFA,
    0xD8,
    0x82,
    0x92,
    0xA8,
    0xF5,
    0x78,
    0xF1,
    0x88,
    0x1A,
    0x84,
    0x9F,
    0x26,
    0x88,
    0x98,
    0x21,
    0xDA,
    0xF4,
    0x1D,
    0xF3,
    0xD8,
    0x87,
    0x9F,
    0x39,
    0xD1,
    0xAF,
    0xD9,
    0xDF,
    0xDF,
    0xFB,
    0xF9,
    0xF4,
    0x0C,
    0xF3,
    0xD8,
    0xFA,
    0xD0,
    0xF8,
    0xDA,
    0xF9,
    0xF9,
    0xD0,
    0xDF,
    0xD9,
    0xF9,
    0xD8,
    0xF4,
    0x0B,
    0xD8,
    0xF3,
    0x87,
    0x9F,
    0x39,
    0xD1,
    0xAF,
    0xD9,
    0xDF,
    0xDF,
    0xF4,
    0x1D,
    0xF3,
    0xD8,
    0xFA,
    0xFC,
    0xA8,
    0x69,
    0xF9,
    0xF9,
    0xAF,
    0xD0,
    0xDA,
    0xDE,
    0xFA,
    0xD9,
    0xF8,
    0x8F,
    0x9F,
    0xA8,
    0xF1,
    0xCC,
    0xF3,
    0x98,
    0xDB,
    0x45,
    0xD9,
    0xAF,
    0xDF,
    0xD0,
    0xF8,
    0xD8,
    0xF1,
    0x8F,
    0x9F,
    0xA8,
    0xCA,
    0xF3,
    0x88,
    0x09,
    0xDA,
    0xAF,
    0x8F,
    0xCB,
    0xF8,
    0xD8,
    0xF2,
    0xAD,
    0x97,
    0x8D,
    0x0C,
    0xD9,
    0xA5,
    0xDF,
    0xF9,
    0xBA,
    0xA6,
    0xF3,
    0xFA,
    0xF4,
    0x12,
    0xF2,
    0xD8,
    0x95,
    0x0D,
    0xD1,
    0xD9,
    0xBA,
    0xA6,
    0xF3,
    0xFA,
    0xDA,
    0xA5,
    0xF2,
    0xC1,
    0xBA,
    0xA6,
    0xF3,
    0xDF,
    0xD8,
    0xF1,
    0xBA,
    0xB2,
    0xB6,
    0x86,
    0x96,
    0xA6,
    0xD0,
    0xCA,
    0xF3,
    0x49,
    0xDA,
    0xA6,
    0xCB,
    0xF8,
    0xD8,
    0xB0,
    0xB4,
    0xB8,
    0xD8,
    0xAD,
    0x84,
    0xF2,
    0xC0,
    0xDF,
    0xF1,
    0x8F,
    0xCB,
    0xC3,
    0xA8,
    /* bank # 7 */
    0xB2,
    0xB6,
    0x86,
    0x96,
    0xC8,
    0xC1,
    0xCB,
    0xC3,
    0xF3,
    0xB0,
    0xB4,
    0x88,
    0x98,
    0xA8,
    0x21,
    0xDB,
    0x71,
    0x8D,
    0x9D,
    0x71,
    0x85,
    0x95,
    0x21,
    0xD9,
    0xAD,
    0xF2,
    0xFA,
    0xD8,
    0x85,
    0x97,
    0xA8,
    0x28,
    0xD9,
    0xF4,
    0x08,
    0xD8,
    0xF2,
    0x8D,
    0x29,
    0xDA,
    0xF4,
    0x05,
    0xD9,
    0xF2,
    0x85,
    0xA4,
    0xC2,
    0xF2,
    0xD8,
    0xA8,
    0x8D,
    0x94,
    0x01,
    0xD1,
    0xD9,
    0xF4,
    0x11,
    0xF2,
    0xD8,
    0x87,
    0x21,
    0xD8,
    0xF4,
    0x0A,
    0xD8,
    0xF2,
    0x84,
    0x98,
    0xA8,
    0xC8,
    0x01,
    0xD1,
    0xD9,
    0xF4,
    0x11,
    0xD8,
    0xF3,
    0xA4,
    0xC8,
    0xBB,
    0xAF,
    0xD0,
    0xF2,
    0xDE,
    0xF8,
    0xF8,
    0xF8,
    0xF8,
    0xF8,
    0xF8,
    0xF8,
    0xF8,
    0xD8,
    0xF1,
    0xB8,
    0xF6,
    0xB5,
    0xB9,
    0xB0,
    0x8A,
    0x95,
    0xA3,
    0xDE,
    0x3C,
    0xA3,
    0xD9,
    0xF8,
    0xD8,
    0x5C,
    0xA3,
    0xD9,
    0xF8,
    0xD8,
    0x7C,
    0xA3,
    0xD9,
    0xF8,
    0xD8,
    0xF8,
    0xF9,
    0xD1,
    0xA5,
    0xD9,
    0xDF,
    0xDA,
    0xFA,
    0xD8,
    0xB1,
    0x85,
    0x30,
    0xF7,
    0xD9,
    0xDE,
    0xD8,
    0xF8,
    0x30,
    0xAD,
    0xDA,
    0xDE,
    0xD8,
    0xF2,
    0xB4,
    0x8C,
    0x99,
    0xA3,
    0x2D,
    0x55,
    0x7D,
    0xA0,
    0x83,
    0xDF,
    0xDF,
    0xDF,
    0xB5,
    0x91,
    0xA0,
    0xF6,
    0x29,
    0xD9,
    0xFB,
    0xD8,
    0xA0,
    0xFC,
    0x29,
    0xD9,
    0xFA,
    0xD8,
    0xA0,
    0xD0,
    0x51,
    0xD9,
    0xF8,
    0xD8,
    0xFC,
    0x51,
    0xD9,
    0xF9,
    0xD8,
    0x79,
    0xD9,
    0xFB,
    0xD8,
    0xA0,
    0xD0,
    0xFC,
    0x79,
    0xD9,
    0xFA,
    0xD8,
    0xA1,
    0xF9,
    0xF9,
    0xF9,
    0xF9,
    0xF9,
    0xA0,
    0xDA,
    0xDF,
    0xDF,
    0xDF,
    0xD8,
    0xA1,
    0xF8,
    0xF8,
    0xF8,
    0xF8,
    0xF8,
    0xAC,
    0xDE,
    0xF8,
    0xAD,
    0xDE,
    0x83,
    0x93,
    0xAC,
    0x2C,
    0x54,
    0x7C,
    0xF1,
    0xA8,
    0xDF,
    0xDF,
    0xDF,
    0xF6,
    0x9D,
    0x2C,
    0xDA,
    0xA0,
    0xDF,
    0xD9,
    0xFA,
    0xDB,
    0x2D,
    0xF8,
    0xD8,
    0xA8,
    0x50,
    0xDA,
    0xA0,
    0xD0,
    0xDE,
    0xD9,
    0xD0,
    0xF8,
    0xF8,
    0xF8,
    0xDB,
    0x55,
    0xF8,
    0xD8,
    0xA8,
    0x78,
    0xDA,
    0xA0,
    0xD0,
    0xDF,
    /* bank # 8 */
    0xD9,
    0xD0,
    0xFA,
    0xF8,
    0xF8,
    0xF8,
    0xF8,
    0xDB,
    0x7D,
    0xF8,
    0xD8,
    0x9C,
    0xA8,
    0x8C,
    0xF5,
    0x30,
    0xDB,
    0x38,
    0xD9,
    0xD0,
    0xDE,
    0xDF,
    0xA0,
    0xD0,
    0xDE,
    0xDF,
    0xD8,
    0xA8,
    0x48,
    0xDB,
    0x58,
    0xD9,
    0xDF,
    0xD0,
    0xDE,
    0xA0,
    0xDF,
    0xD0,
    0xDE,
    0xD8,
    0xA8,
    0x68,
    0xDB,
    0x70,
    0xD9,
    0xDF,
    0xDF,
    0xA0,
    0xDF,
    0xDF,
    0xD8,
    0xF1,
    0xA8,
    0x88,
    0x90,
    0x2C,
    0x54,
    0x7C,
    0x98,
    0xA8,
    0xD0,
    0x5C,
    0x38,
    0xD1,
    0xDA,
    0xF2,
    0xAE,
    0x8C,
    0xDF,
    0xF9,
    0xD8,
    0xB0,
    0x87,
    0xA8,
    0xC1,
    0xC1,
    0xB1,
    0x88,
    0xA8,
    0xC6,
    0xF9,
    0xF9,
    0xDA,
    0x36,
    0xD8,
    0xA8,
    0xF9,
    0xDA,
    0x36,
    0xD8,
    0xA8,
    0xF9,
    0xDA,
    0x36,
    0xD8,
    0xA8,
    0xF9,
    0xDA,
    0x36,
    0xD8,
    0xA8,
    0xF9,
    0xDA,
    0x36,
    0xD8,
    0xF7,
    0x8D,
    0x9D,
    0xAD,
    0xF8,
    0x18,
    0xDA,
    0xF2,
    0xAE,
    0xDF,
    0xD8,
    0xF7,
    0xAD,
    0xFA,
    0x30,
    0xD9,
    0xA4,
    0xDE,
    0xF9,
    0xD8,
    0xF2,
    0xAE,
    0xDE,
    0xFA,
    0xF9,
    0x83,
    0xA7,
    0xD9,
    0xC3,
    0xC5,
    0xC7,
    0xF1,
    0x88,
    0x9B,
    0xA7,
    0x7A,
    0xAD,
    0xF7,
    0xDE,
    0xDF,
    0xA4,
    0xF8,
    0x84,
    0x94,
    0x08,
    0xA7,
    0x97,
    0xF3,
    0x00,
    0xAE,
    0xF2,
    0x98,
    0x19,
    0xA4,
    0x88,
    0xC6,
    0xA3,
    0x94,
    0x88,
    0xF6,
    0x32,
    0xDF,
    0xF2,
    0x83,
    0x93,
    0xDB,
    0x09,
    0xD9,
    0xF2,
    0xAA,
    0xDF,
    0xD8,
    0xD8,
    0xAE,
    0xF8,
    0xF9,
    0xD1,
    0xDA,
    0xF3,
    0xA4,
    0xDE,
    0xA7,
    0xF1,
    0x88,
    0x9B,
    0x7A,
    0xD8,
    0xF3,
    0x84,
    0x94,
    0xAE,
    0x19,
    0xF9,
    0xDA,
    0xAA,
    0xF1,
    0xDF,
    0xD8,
    0xA8,
    0x81,
    0xC0,
    0xC3,
    0xC5,
    0xC7,
    0xA3,
    0x92,
    0x83,
    0xF6,
    0x28,
    0xAD,
    0xDE,
    0xD9,
    0xF8,
    0xD8,
    0xA3,
    0x50,
    0xAD,
    0xD9,
    0xF8,
    0xD8,
    0xA3,
    0x78,
    0xAD,
    0xD9,
    0xF8,
    0xD8,
    0xF8,
    0xF9,
    0xD1,
    0xA1,
    0xDA,
    0xDE,
    0xC3,
    0xC5,
    0xC7,
    0xD8,
    0xA1,
    0x81,
    0x94,
    0xF8,
    0x18,
    0xF2,
    0xB0,
    0x89,
    0xAC,
    0xC3,
    0xC5,
    0xC7,
    0xF1,
    0xD8,
    0xB8,
    /* bank # 9 */
    0xB4,
    0xB0,
    0x97,
    0x86,
    0xA8,
    0x31,
    0x9B,
    0x06,
    0x99,
    0x07,
    0xAB,
    0x97,
    0x28,
    0x88,
    0x9B,
    0xF0,
    0x0C,
    0x20,
    0x14,
    0x40,
    0xB0,
    0xB4,
    0xB8,
    0xF0,
    0xA8,
    0x8A,
    0x9A,
    0x28,
    0x50,
    0x78,
    0xB7,
    0x9B,
    0xA8,
    0x29,
    0x51,
    0x79,
    0x24,
    0x70,
    0x59,
    0x44,
    0x69,
    0x38,
    0x64,
    0x48,
    0x31,
    0xF1,
    0xBB,
    0xAB,
    0x88,
    0x00,
    0x2C,
    0x54,
    0x7C,
    0xF0,
    0xB3,
    0x8B,
    0xB8,
    0xA8,
    0x04,
    0x28,
    0x50,
    0x78,
    0xF1,
    0xB0,
    0x88,
    0xB4,
    0x97,
    0x26,
    0xA8,
    0x59,
    0x98,
    0xBB,
    0xAB,
    0xB3,
    0x8B,
    0x02,
    0x26,
    0x46,
    0x66,
    0xB0,
    0xB8,
    0xF0,
    0x8A,
    0x9C,
    0xA8,
    0x29,
    0x51,
    0x79,
    0x8B,
    0x29,
    0x51,
    0x79,
    0x8A,
    0x24,
    0x70,
    0x59,
    0x8B,
    0x20,
    0x58,
    0x71,
    0x8A,
    0x44,
    0x69,
    0x38,
    0x8B,
    0x39,
    0x40,
    0x68,
    0x8A,
    0x64,
    0x48,
    0x31,
    0x8B,
    0x30,
    0x49,
    0x60,
    0x88,
    0xF1,
    0xAC,
    0x00,
    0x2C,
    0x54,
    0x7C,
    0xF0,
    0x8C,
    0xA8,
    0x04,
    0x28,
    0x50,
    0x78,
    0xF1,
    0x88,
    0x97,
    0x26,
    0xA8,
    0x59,
    0x98,
    0xAC,
    0x8C,
    0x02,
    0x26,
    0x46,
    0x66,
    0xF0,
    0x89,
    0x9C,
    0xA8,
    0x29,
    0x51,
    0x79,
    0x24,
    0x70,
    0x59,
    0x44,
    0x69,
    0x38,
    0x64,
    0x48,
    0x31,
    0xA9,
    0x88,
    0x09,
    0x20,
    0x59,
    0x70,
    0xAB,
    0x11,
    0x38,
    0x40,
    0x69,
    0xA8,
    0x19,
    0x31,
    0x48,
    0x60,
    0x8C,
    0xA8,
    0x3C,
    0x41,
    0x5C,
    0x20,
    0x7C,
    0x00,
    0xF1,
    0x87,
    0x98,
    0x19,
    0x86,
    0xA8,
    0x6E,
    0x76,
    0x7E,
    0xA9,
    0x99,
    0x88,
    0x2D,
    0x55,
    0x7D,
    0xD8,
    0xB1,
    0xB5,
    0xB9,
    0xA3,
    0xDF,
    0xDF,
    0xDF,
    0xAE,
    0xD0,
    0xDF,
    0xAA,
    0xD0,
    0xDE,
    0xF2,
    0xAB,
    0xF8,
    0xF9,
    0xD9,
    0xB0,
    0x87,
    0xC4,
    0xAA,
    0xF1,
    0xDF,
    0xDF,
    0xBB,
    0xAF,
    0xDF,
    0xDF,
    0xB9,
    0xD8,
    0xB1,
    0xF1,
    0xA3,
    0x97,
    0x8E,
    0x60,
    0xDF,
    0xB0,
    0x84,
    0xF2,
    0xC8,
    0xF8,
    0xF9,
    0xD9,
    0xDE,
    0xD8,
    0x93,
    0x85,
    0xF1,
    0x4A,
    0xB1,
    0x83,
    0xA3,
    0x08,
    0xB5,
    0x83,
    /* bank # 10 */
    0x9A,
    0x08,
    0x10,
    0xB7,
    0x9F,
    0x10,
    0xD8,
    0xF1,
    0xB0,
    0xBA,
    0xAE,
    0xB0,
    0x8A,
    0xC2,
    0xB2,
    0xB6,
    0x8E,
    0x9E,
    0xF1,
    0xFB,
    0xD9,
    0xF4,
    0x1D,
    0xD8,
    0xF9,
    0xD9,
    0x0C,
    0xF1,
    0xD8,
    0xF8,
    0xF8,
    0xAD,
    0x61,
    0xD9,
    0xAE,
    0xFB,
    0xD8,
    0xF4,
    0x0C,
    0xF1,
    0xD8,
    0xF8,
    0xF8,
    0xAD,
    0x19,
    0xD9,
    0xAE,
    0xFB,
    0xDF,
    0xD8,
    0xF4,
    0x16,
    0xF1,
    0xD8,
    0xF8,
    0xAD,
    0x8D,
    0x61,
    0xD9,
    0xF4,
    0xF4,
    0xAC,
    0xF5,
    0x9C,
    0x9C,
    0x8D,
    0xDF,
    0x2B,
    0xBA,
    0xB6,
    0xAE,
    0xFA,
    0xF8,
    0xF4,
    0x0B,
    0xD8,
    0xF1,
    0xAE,
    0xD0,
    0xF8,
    0xAD,
    0x51,
    0xDA,
    0xAE,
    0xFA,
    0xF8,
    0xF1,
    0xD8,
    0xB9,
    0xB1,
    0xB6,
    0xA3,
    0x83,
    0x9C,
    0x08,
    0xB9,
    0xB1,
    0x83,
    0x9A,
    0xB5,
    0xAA,
    0xC0,
    0xFD,
    0x30,
    0x83,
    0xB7,
    0x9F,
    0x10,
    0xB5,
    0x8B,
    0x93,
    0xF2,
    0x02,
    0x02,
    0xD1,
    0xAB,
    0xDA,
    0xDE,
    0xD8,
    0xF1,
    0xB0,
    0x80,
    0xBA,
    0xAB,
    0xC0,
    0xC3,
    0xB2,
    0x84,
    0xC1,
    0xC3,
    0xD8,
    0xB1,
    0xB9,
    0xF3,
    0x8B,
    0xA3,
    0x91,
    0xB6,
    0x09,
    0xB4,
    0xD9,
    0xAB,
    0xDE,
    0xB0,
    0x87,
    0x9C,
    0xB9,
    0xA3,
    0xDD,
    0xF1,
    0xB3,
    0x8B,
    0x8B,
    0x8B,
    0x8B,
    0x8B,
    0xB0,
    0x87,
    0x20,
    0x28,
    0x30,
    0x38,
    0xB2,
    0x8B,
    0xB6,
    0x9B,
    0xF2,
    0xA3,
    0xC0,
    0xC8,
    0xC2,
    0xC4,
    0xCC,
    0xC6,
    0xA3,
    0xA3,
    0xA3,
    0xF1,
    0xB0,
    0x87,
    0xB5,
    0x9A,
    0xD8,
    0xF3,
    0x9B,
    0xA3,
    0xA3,
    0xDC,
    0xBA,
    0xAC,
    0xDF,
    0xB9,  // Reverted back as packet size changes causing isues... TODO:change
           // 2742 from 0xD8 to 0x20 Including the DMP_FEATURE_TAP -- known
           // issue in which if you do not enable DMP_FEATURE_TAP then the
           // interrupts will be at 200Hz even if fifo rate
    0xA3,
    0xFE,
    0xF2,
    0xAB,
    0xC4,
    0xAA,
    0xF1,
    0xDF,
    0xDF,
    0xBB,
    0xAF,
    0xDF,
    0xDF,
    0xA3,
    0xA3,
    0xA3,
    0xD8,
    0xD8,
    0xD8,
    0xBB,
    0xB3,
    0xB7,
    0xF1,
    0xAA,
    0xF9,
    0xDA,
    0xFF,
    0xD9,
    0x80,
    0x9A,
    0xAA,
    0x28,
    0xB4,
    0x80,
    0x98,
    0xA7,
    0x20,
    0xB7,
    0x97,
    0x87,
    0xA8,
    0x66,
    0x88,
    0xF0,
    0x79,
    0x51,
    0xF1,
    0x90,
    0x2C,
    0x87,
    0x0C,
    0xA7,
    0x81,
    0x97,
    0x62,
    0x93,
    0xF0,
    0x71,
    0x71,
    0x60,
    0x85,
    0x94,
    0x01,
    0x29,
    /* bank # 11 */
    0x51,
    0x79,
    0x90,
    0xA5,
    0xF1,
    0x28,
    0x4C,
    0x6C,
    0x87,
    0x0C,
    0x95,
    0x18,
    0x85,
    0x78,
    0xA3,
    0x83,
    0x90,
    0x28,
    0x4C,
    0x6C,
    0x88,
    0x6C,
    0xD8,
    0xF3,
    0xA2,
    0x82,
    0x00,
    0xF2,
    0x10,
    0xA8,
    0x92,
    0x19,
    0x80,
    0xA2,
    0xF2,
    0xD9,
    0x26,
    0xD8,
    0xF1,
    0x88,
    0xA8,
    0x4D,
    0xD9,
    0x48,
    0xD8,
    0x96,
    0xA8,
    0x39,
    0x80,
    0xD9,
    0x3C,
    0xD8,
    0x95,
    0x80,
    0xA8,
    0x39,
    0xA6,
    0x86,
    0x98,
    0xD9,
    0x2C,
    0xDA,
    0x87,
    0xA7,
    0x2C,
    0xD8,
    0xA8,
    0x89,
    0x95,
    0x19,
    0xA9,
    0x80,
    0xD9,
    0x38,
    0xD8,
    0xA8,
    0x89,
    0x39,
    0xA9,
    0x80,
    0xDA,
    0x3C,
    0xD8,
    0xA8,
    0x2E,
    0xA8,
    0x39,
    0x90,
    0xD9,
    0x0C,
    0xD8,
    0xA8,
    0x95,
    0x31,
    0x98,
    0xD9,
    0x0C,
    0xD8,
    0xA8,
    0x09,
    0xD9,
    0xFF,
    0xD8,
    0x01,
    0xDA,
    0xFF,
    0xD8,
    0x95,
    0x39,
    0xA9,
    0xDA,
    0x26,
    0xFF,
    0xD8,
    0x90,
    0xA8,
    0x0D,
    0x89,
    0x99,
    0xA8,
    0x10,
    0x80,
    0x98,
    0x21,
    0xDA,
    0x2E,
    0xD8,
    0x89,
    0x99,
    0xA8,
    0x31,
    0x80,
    0xDA,
    0x2E,
    0xD8,
    0xA8,
    0x86,
    0x96,
    0x31,
    0x80,
    0xDA,
    0x2E,
    0xD8,
    0xA8,
    0x87,
    0x31,
    0x80,
    0xDA,
    0x2E,
    0xD8,
    0xA8,
    0x82,
    0x92,
    0xF3,
    0x41,
    0x80,
    0xF1,
    0xD9,
    0x2E,
    0xD8,
    0xA8,
    0x82,
    0xF3,
    0x19,
    0x80,
    0xF1,
    0xD9,
    0x2E,
    0xD8,
    0x82,
    0xAC,
    0xF3,
    0xC0,
    0xA2,
    0x80,
    0x22,
    0xF1,
    0xA6,
    0x2E,
    0xA7,
    0x2E,
    0xA9,
    0x22,
    0x98,
    0xA8,
    0x29,
    0xDA,
    0xAC,
    0xDE,
    0xFF,
    0xD8,
    0xA2,
    0xF2,
    0x2A,
    0xF1,
    0xA9,
    0x2E,
    0x82,
    0x92,
    0xA8,
    0xF2,
    0x31,
    0x80,
    0xA6,
    0x96,
    0xF1,
    0xD9,
    0x00,
    0xAC,
    0x8C,
    0x9C,
    0x0C,
    0x30,
    0xAC,
    0xDE,
    0xD0,
    0xDE,
    0xFF,
    0xD8,
    0x8C,
    0x9C,
    0xAC,
    0xD0,
    0x10,
    0xAC,
    0xDE,
    0x80,
    0x92,
    0xA2,
    0xF2,
    0x4C,
    0x82,
    0xA8,
    0xF1,
    0xCA,
    0xF2,
    0x35,
    0xF1,
    0x96,
    0x88,
    0xA6,
    0xD9,
    0x00,
    0xD8,
    0xF1,
    0xFF,
};
}  // namespace

Mpu6050::Mpu6050(uint8_t device_i2c_address) : i2c_device_(device_i2c_address) {
}

bool Mpu6050::Setup() {
  i2c_device_.Setup();
  i2c_device_.WriteBits(MPU6050_RA_PWR_MGMT_1, 2, 3, MPU6050_CLOCK_PLL_XGYRO);
  i2c_device_.WriteBits(MPU6050_RA_GYRO_CONFIG, 4, 2, MPU6050_GYRO_FS_250);
  i2c_device_.WriteBits(MPU6050_RA_ACCEL_CONFIG, 4, 2, MPU6050_ACCEL_FS_2);
  i2c_device_.WriteBit(MPU6050_RA_PWR_MGMT_1, 6, 0);
  i2c_device_.WriteBit(MPU6050_RA_PWR_MGMT_1, 7, 1);
  delay(100);
  i2c_device_.WriteBits(0x6A, 2, 3, 0b111);
  delay(100);
  i2c_device_.Write(0x6B, 0x01);
  i2c_device_.Write(0x38, 0x00);
  i2c_device_.Write(0x23, 0x00);
  i2c_device_.Write(0x1C, 0x00);
  i2c_device_.Write(0x37, 0x80);
  i2c_device_.Write(0x6B, 0x01);
  i2c_device_.Write(0x19, 0x04);
  i2c_device_.Write(0x1A, 0x01);

  uint8_t verify_buffer[MPU6050_DMP_MEMORY_CHUNK_SIZE] = {0};
  uint8_t prog_puffer[MPU6050_DMP_MEMORY_CHUNK_SIZE] = {0};
  uint8_t address = 0;
  uint8_t bank = 0;
  uint8_t chunk_size = 0;

  i2c_device_.Write(MPU6050_RA_BANK_SEL, bank & 0x1F);
  i2c_device_.Write(MPU6050_RA_MEM_START_ADDR, address);

  for (uint16_t i = 0; i < MPU6050_DMP_CODE_SIZE;) {
    // determine correct chunk size according to bank position and data size
    chunk_size = MPU6050_DMP_MEMORY_CHUNK_SIZE;

    // make sure we don't go past the data size
    if (i + chunk_size > MPU6050_DMP_CODE_SIZE) {
      chunk_size = MPU6050_DMP_CODE_SIZE - i;
    }

    // make sure this chunk doesn't go past the bank boundary (256 bytes)
    if (chunk_size > 256 - address) {
      chunk_size = 256 - address;
    }

    for (uint8_t j = 0; j < chunk_size; j++) {
      prog_puffer[j] = pgm_read_byte(g_dmp_memory + i + j);
    }

    i2c_device_.Write(MPU6050_RA_MEM_R_W, prog_puffer, chunk_size);

    i2c_device_.Write(MPU6050_RA_BANK_SEL, bank & 0x1F);
    i2c_device_.Write(MPU6050_RA_MEM_START_ADDR, address);
    i2c_device_.Read(MPU6050_RA_MEM_R_W, verify_buffer, chunk_size);
    if (memcmp(prog_puffer, verify_buffer, chunk_size) != 0) {
      return false;  // uh oh.
    }

    // increase byte index by [chunk_size]
    i += chunk_size;

    // uint8_t automatically wraps to 0 at 256
    address += chunk_size;

    // if we aren't done, update bank (if necessary) and address
    if (i < MPU6050_DMP_CODE_SIZE) {
      if (address == 0) {
        bank++;
      }
      i2c_device_.Write(MPU6050_RA_BANK_SEL, bank & 0x1F);
      i2c_device_.Write(MPU6050_RA_MEM_START_ADDR, address);
    }
  }

  i2c_device_.Write(0x70, (uint8_t[]){0x04, 0x00});
  i2c_device_.Write(0x1B, 0x18);
  i2c_device_.Write(0x6A, 0xC0);
  i2c_device_.Write(0x38, 0x02);
  i2c_device_.WriteBit(0x6A, 2, 1);
  i2c_device_.WriteBit(MPU6050_RA_USER_CTRL, 7, 0);
  i2c_device_.WriteBit(MPU6050_RA_USER_CTRL, 7, 1);
  return i2c_device_.Read(MPU6050_RA_WHO_AM_I) == 0x68;
}

bool Mpu6050::UpdateMotionInfo() {
  uint8_t data[FIFO_SIZE] = {0};

  if (!GetCurrentFifoPacket(data, sizeof(data))) {
    return false;
  }

  quaternion_.w = ((static_cast<int16_t>(data[0]) << 8) | data[1]) / 16384.0f;
  quaternion_.x = ((static_cast<int16_t>(data[4]) << 8) | data[5]) / 16384.0f;
  quaternion_.y = ((static_cast<int16_t>(data[8]) << 8) | data[9]) / 16384.0f;
  quaternion_.z = ((static_cast<int16_t>(data[12]) << 8) | data[13]) / 16384.0f;

  gravity_.x = 2 * (quaternion_.x * quaternion_.z - quaternion_.w * quaternion_.y);
  gravity_.y = 2 * (quaternion_.w * quaternion_.x + quaternion_.y * quaternion_.z);
  gravity_.z = quaternion_.w * quaternion_.w - quaternion_.x * quaternion_.x - quaternion_.y * quaternion_.y +
               quaternion_.z * quaternion_.z;
  return true;
}

Mpu6050::Euler Mpu6050::GetEuler() const {
  Mpu6050::Euler euler;

  euler.yaw = atan2(2 * quaternion_.x * quaternion_.y - 2 * quaternion_.w * quaternion_.z,
                    2 * quaternion_.w * quaternion_.w + 2 * quaternion_.x * quaternion_.x - 1) *
              180 / M_PI;
  euler.pitch = atan2(gravity_.x, sqrt(gravity_.y * gravity_.y + gravity_.z * gravity_.z)) * 180 / M_PI;
  euler.roll = atan2(gravity_.y, gravity_.z) * 180 / M_PI;
  if (gravity_.z < 0) {
    if (euler.pitch > 0) {
      euler.pitch = PI - euler.pitch;
    } else {
      euler.pitch = -PI - euler.pitch;
    }
  }

  return euler;
}

Mpu6050::Acceleration Mpu6050::GetAcceleration() const {
  return {static_cast<int16_t>(gravity_.x * -1023),
          static_cast<int16_t>(gravity_.y * -1023),
          static_cast<int16_t>(gravity_.z * -1023)};
}

uint16_t Mpu6050::GetFifoCount() {
  uint8_t buffer[2] = {0};
  i2c_device_.Read(MPU6050_RA_FIFO_COUNT_H, buffer, sizeof(buffer));
  return (((uint16_t)buffer[0]) << 8) | buffer[1];
}

void Mpu6050::GetFifoBytes(uint8_t *data, uint8_t length) {
  if (length > 0) {
    i2c_device_.Read(MPU6050_RA_FIFO_R_W, data, length);
  } else {
    *data = 0;
  }
}

bool Mpu6050::GetCurrentFifoPacket(uint8_t *data, const uint8_t length) {
  int16_t fifo_count = 0;
  uint32_t break_timer = micros();
  bool packet_received = false;
  do {
    if ((fifo_count = GetFifoCount()) > length) {
      if (fifo_count > 200) {                              // if you waited to get the FIFO buffer to > 200 bytes
                                                           // it will take longer to get the last packet in the
                                                           // FIFO Buffer than it will take to  reset the buffer
                                                           // and wait for the next to arrive
        i2c_device_.WriteBit(MPU6050_RA_USER_CTRL, 2, 1);  // Fixes any overflow corruption
        fifo_count = 0;
        while (!(fifo_count = GetFifoCount()) && ((micros() - break_timer) <= MPU6050_FIFO_DEFAULT_TIMEOUT))
          ;     // Get Next New Packet
      } else {  // We have more than 1 packet but less than 200 bytes of data in
                // the FIFO Buffer
        uint8_t Trash[BUFFER_LENGTH];
        while ((fifo_count = GetFifoCount()) > length) {  // Test each time just in case the MPU is writing to
                                                          // the FIFO Buffer
          fifo_count = fifo_count - length;               // Save the last packet
          uint16_t RemoveBytes;
          while (fifo_count) {  // fifo count will reach zero so this is safe
            RemoveBytes = (fifo_count < BUFFER_LENGTH) ? fifo_count : BUFFER_LENGTH;  // Buffer Length is
                                                                                      // different than the
                                                                                      // packet length this
                                                                                      // will efficiently
                                                                                      // clear the buffer
            GetFifoBytes(Trash, (uint8_t)RemoveBytes);
            fifo_count -= RemoveBytes;
          }
        }
      }
    }
    if (!fifo_count) {
      return false;  // Called too early no data or we timed out after FIFO Reset
    }
    // We have 1 packet
    packet_received = fifo_count == length;
    if (!packet_received && (micros() - break_timer) > (MPU6050_FIFO_DEFAULT_TIMEOUT)) {
      return false;
    }
  } while (!packet_received);
  GetFifoBytes(data, length);  // Get 1 packet
  return true;
}